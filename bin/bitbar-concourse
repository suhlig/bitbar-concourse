#!/usr/bin/env ruby
$LOAD_PATH.unshift File.expand_path('../../lib', __FILE__)

require 'concourse'
require 'bitbar'

client = Concourse::Client.new(
  ENV.fetch('CONCOURSE_URI'),
  ENV['CONCOURSE_USER'],
  ENV['CONCOURSE_PASSWORD']
)

target_name = ENV.fetch('CONCOURSE_TARGET', 'Concourse')
ci = Concourse::Target.new(client)

begin
  pipelines = ci.pipelines
rescue => e
  warn Bitbar::Concourse::ErrorPresenter.new(e, target_name)
  exit 1
end

if ARGV.any?
  pipelines = pipelines.select { |pipeline| ARGV.include?(pipeline.name) }
end

latest_builds = pipelines.map do |pipeline|
  pipeline.jobs.map do |job|
    if build = job.finished_build
      Bitbar::Concourse::BuildPresenter.new(build)
    end
  end
end.flatten.compact.sort_by{|build| build.end_time}.reverse

puts Bitbar::Concourse::AggregatePresenter.new(latest_builds, target_name)
puts '---'
puts latest_builds
